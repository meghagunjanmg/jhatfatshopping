{"version":3,"sources":["../../../../src/commands/run/ios/Podfile.ts"],"names":["EXTERNAL_SOURCES_KEY","getDependenciesFromPodfileLock","podfileLockPath","Log","debug","fileContent","fs","readFileSync","err","error","chalk","bold","tail","split","slice","checksumTail","getTempPrebuildFolder","projectRoot","path","join","hasNewDependenciesSinceLastBuild","packageChecksums","tempDir","tempPkgJsonPath","pathExistsSync","dependencies","devDependencies","JsonFile","read","hasNewDependencies","hasNewDevDependencies","createPackageChecksums","pkg","hasPackageJsonDependencyListChangedAsync","packages","ensureFile","writeAsync","doesProjectUseCocoaPods","existsSync","isLockfileCreated","maybePromptToSyncPodsAsync","promptToInstallPodsAsync","missingPods","length","log","map","pod","removeSync"],"mappings":"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","sourcesContent":["import { getPackageJson, PackageJSONConfig } from '@expo/config';\nimport JsonFile from '@expo/json-file';\nimport chalk from 'chalk';\nimport fs from 'fs-extra';\nimport { safeLoad } from 'js-yaml';\nimport * as path from 'path';\n\nimport Log from '../../../log';\nimport { hashForDependencyMap } from '../../eject/updatePackageJson';\nimport { installCocoaPodsAsync } from '../../utils/CreateApp';\n\nconst EXTERNAL_SOURCES_KEY = 'EXTERNAL SOURCES';\n\nexport function getDependenciesFromPodfileLock(podfileLockPath: string) {\n  Log.debug(`Reading ${podfileLockPath}`);\n  let fileContent;\n  try {\n    fileContent = fs.readFileSync(podfileLockPath, 'utf8');\n  } catch (err) {\n    Log.error(\n      `Could not find \"Podfile.lock\" at ${chalk.bold(podfileLockPath)}. Did you run \"${chalk.bold(\n        'npx pod-install'\n      )}\"?`\n    );\n    return {};\n  }\n\n  // Previous portions of the lock file could be invalid yaml.\n  // Only parse parts that are valid\n  const tail = fileContent.split(EXTERNAL_SOURCES_KEY).slice(1);\n  const checksumTail = EXTERNAL_SOURCES_KEY + tail;\n\n  return safeLoad(checksumTail)[EXTERNAL_SOURCES_KEY] || {};\n}\n\nfunction getTempPrebuildFolder(projectRoot: string) {\n  return path.join(projectRoot, '.expo', 'prebuild');\n}\n\ntype PackageChecksums = {\n  dependencies: string;\n  devDependencies: string;\n};\n\nfunction hasNewDependenciesSinceLastBuild(projectRoot: string, packageChecksums: PackageChecksums) {\n  // TODO: Maybe comparing lock files would be better...\n  const tempDir = getTempPrebuildFolder(projectRoot);\n  const tempPkgJsonPath = path.join(tempDir, 'cached-packages.json');\n  if (!fs.pathExistsSync(tempPkgJsonPath)) {\n    return true;\n  }\n  const { dependencies, devDependencies } = JsonFile.read(tempPkgJsonPath);\n  // Only change the dependencies if the normalized hash changes, this helps to reduce meaningless changes.\n  const hasNewDependencies = packageChecksums.dependencies !== dependencies;\n  const hasNewDevDependencies = packageChecksums.devDependencies !== devDependencies;\n\n  return hasNewDependencies || hasNewDevDependencies;\n}\n\nfunction createPackageChecksums(pkg: PackageJSONConfig): PackageChecksums {\n  return {\n    dependencies: hashForDependencyMap(pkg.dependencies || {}),\n    devDependencies: hashForDependencyMap(pkg.devDependencies || {}),\n  };\n}\n\nexport async function hasPackageJsonDependencyListChangedAsync(projectRoot: string) {\n  const pkg = getPackageJson(projectRoot);\n\n  const packages = createPackageChecksums(pkg);\n  const hasNewDependencies = hasNewDependenciesSinceLastBuild(projectRoot, packages);\n\n  // Cache package.json\n  const tempDir = path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json');\n  await fs.ensureFile(tempDir);\n  await JsonFile.writeAsync(tempDir, packages);\n\n  return hasNewDependencies;\n}\n\nfunction doesProjectUseCocoaPods(projectRoot: string): boolean {\n  return fs.existsSync(path.join(projectRoot, 'ios', 'Podfile'));\n}\n\nfunction isLockfileCreated(projectRoot: string): boolean {\n  const podfileLockPath = path.join(projectRoot, 'ios', 'Podfile.lock');\n  return fs.existsSync(podfileLockPath);\n}\n\n// TODO: Same process but with app.config changes + default plugins.\n// This will ensure the user is prompted for extra setup.\nexport default async function maybePromptToSyncPodsAsync(projectRoot: string) {\n  if (!doesProjectUseCocoaPods(projectRoot)) {\n    // Project does not use CocoaPods\n    return;\n  }\n  if (!isLockfileCreated(projectRoot)) {\n    await installCocoaPodsAsync(projectRoot);\n    return;\n  }\n\n  // Getting autolinked packages can be heavy, optimize around checking every time.\n  if (!(await hasPackageJsonDependencyListChangedAsync(projectRoot))) {\n    return;\n  }\n\n  await promptToInstallPodsAsync(projectRoot, []);\n}\n\nasync function promptToInstallPodsAsync(projectRoot: string, missingPods?: string[]) {\n  if (missingPods?.length) {\n    Log.log(\n      `Could not find the following native modules: ${missingPods\n        .map(pod => chalk.bold(pod))\n        .join(', ')}. Did you forget to run \"${chalk.bold('pod install')}\" ?`\n    );\n  }\n\n  try {\n    await installCocoaPodsAsync(projectRoot);\n  } catch (error) {\n    fs.removeSync(path.join(getTempPrebuildFolder(projectRoot), 'cached-packages.json'));\n    throw error;\n  }\n}\n"],"file":"Podfile.js"}